package hellojpa;import javax.persistence.EntityManager;import javax.persistence.EntityManagerFactory;import javax.persistence.EntityTransaction;import javax.persistence.Persistence;import java.util.List;public class JpaMain {    public static void main(String[] args) {        EntityManagerFactory emf = Persistence.createEntityManagerFactory("hello");        EntityManager em = emf.createEntityManager();        EntityTransaction tx = em.getTransaction();        tx.begin();        try {            //3-1. 영속성 컨텍스트(1)            //[1] 비영속            Member member1 = new Member();            member1.setId(20L);            member1.setName("20L");            //member객체를 최초로 생성하고 입력까지만 해둠 = 비영속 상태//            //[2] 영속//            //아래 코드에 의해 member는 영속상태가 됨//            System.out.println("=== BEFORE ===");//            em.persist(member1);//            //영속상태로 변하긴하지만, db에 저장이 되는것은 아님!//            //만약 이 단계에서 db에저장이되려면 sql의 전달이 필요한데, 이 코드 앞뒤에 sysout을 찍어서 sql이 언제 전달되는지 확인해볼 수 있음//            System.out.println("=== AFTER ===");//            //sout after가 끝날때까지 sql은 실행되지 않음 = persist에 의해 db에 저장되는것이 아님            //[3]준영속//            Member member2 = new Member();//            member2.setId(30L);//            member2.setName("30L");////            em.persist(member2);//            em.detach(member2);            //[4]삭제 : 요건 sql이 생성되네?//            Member member3 = new Member();//            member3.setId(40L);//            member3.setName("40L");////            em.persist(member3);//            em.remove(member3);            tx.commit();        } catch (Exception e) {            tx.rollback();        } finally {            em.close();        }        emf.close();    }}