package section4;import javax.persistence.*;import java.util.Date;//@Entitypublic class Member4 {    @Id //pk매핑    private Long id;    @Column(name = "name")    //[1]name : 객체명(username)과 데이트베이스의 컬럼명(user)을 다르게 사용하고싶은경우 사용    //[2]insertable = false & [3]updatable = false    // : 등록, 변경 등 update가 발생할때 이 컬럼은 변경안할거야!!(기본값 true) > 물론 db에서 강제변경하는건 가능    //[4]nullable = false : not null 제약조건    //[5]unique = true : 유니크 제약조건을 넣어주고싶을때 사용함(유니크제약조건명이 랜덤이라 실질적으로 사용하기엔...부적합)    //[6]columnDefinition = "" : 제약조건을 String으로 직접 추가가능    private String username;    private Integer age;    @Enumerated(EnumType.STRING)    //db에는 enum타입이 없음(유사한게 있는경우가 있긴하다만..)    //enum타입의 기본값은 ordinal = 이넘의 순서를 숫자로 표현함    //추후 이넘타입의 변경이 발생하는경우 데이터에 문제가 발생할 가능성 높아짐    //그러니까 String 으로 사용하는걸 권장    private RoleType roleType;    @Temporal(TemporalType.TIMESTAMP)    //날짜타입을 매핑할때 사용 ,TemporalType속성에서 DATE,TIME,TIMESTAMP(date+time) 3가지 중 사용가능    //LocalDate, LocalDateTime을 사용하는 경우에는 생략가능!    private Date createdDate;    @Temporal(TemporalType.TIMESTAMP)    private Date lastModifiedDate;    @Lob    //대용량컨텐츠를 사용하기위한 용도, 지정가능한 속성 없음    //[1]매핑하는 필드타입이 문자인경우 clob (String, char[])    //[2]매핑하는 필드타입이 문자가 아닌경우 blob으로 매핑 (byte[])    private String description;    @Transient //db랑 상관없이 사용하고싶은 객체가 있는경우에 사용    private String temp;}